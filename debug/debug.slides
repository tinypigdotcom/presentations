%%%
*Debugging, and How to Do Less of It* format:markup slide:001

David M. Bradford
OmniTI

%%%
*Debugging, and How to Do Less of It* format:markup slide:002

*Who am I?*

David M. Bradford
@tinypig
tinypig.com

%%%
*Debugging, and How to Do Less of It* format:markup slide:003

*Who am I? - Mnemonic Device*


tinypig

narration: Easy to remember!

%%%
*Debugging, and How to Do Less of It* format:markup slide:005

*Who am I? - Mnemonic Device*


tinypig

\* I am neither tiny

%%%
*Debugging, and How to Do Less of It* format:markup slide:006

*Who am I? - Mnemonic Device*


tinypig

\* I am neither tiny

\* nor a pig

%%%
*Debugging, and How to Do Less of It* format:markup slide:007

*Who am I?*

\* Web Engineer at OmniTI

    - Full stack tech consulting

    - Remote database management and consulting

    - Large Scale / Mission Critical

    - We're Hiring!

    - omniti.com

%%%
*Debugging, and How to Do Less of It* format:markup slide:008

*Why This Talk?*

\* Debugging sucks!

%%%
*Debugging, and How to Do Less of It* format:markup slide:009

*Why This Talk?*

\* Debugging sucks butt.

%%%
*Debugging, and How to Do Less of It* format:markup slide:010

*Why This Talk?*

\* Debugging sucks! But...

%%%
*Debugging, and How to Do Less of It* format:markup slide:011

*Why This Talk?*

\* Debugging sucks! But...

\* The better we get at it

%%%
*Debugging, and How to Do Less of It* format:markup slide:012

*Why This Talk?*

\* Debugging sucks! But...

\* The better we get at it

\* The less of our time it takes

%%%
*Debugging, and How to Do Less of It* format:markup slide:013

*Why This Talk?*

\* Debugging sucks! But...

\* The better we get at it

\* The less of our time it takes (hopefully)

%%%
*Debugging, and How to Do Less of It* format:markup slide:014

*Why This Talk?*

\* Debugging sucks! But...

\* The better we get at it

\* The less of our time it takes (hopefully)

\* But more importantly:

\* Let's find strategies to avoid having to do it at all

%%%
*Debugging, and How to Do Less of It* format:markup slide:015

*The Most Important Slide In The Deck*

The next slide contains my least favorite error message... (slide:016)

%%%
*Debugging, and How to Do Less of It* format:markup slide:017

*The worst error message is no message*

Because:

\* The code is not working

\* you have no idea why

\* more commonly known as a "bug"

%%%
*Debugging, and How to Do Less of It* format:markup slide:018

Consider the following program:

    $prson='David';
    print "Hello, $person!";

Output:
Hello, !

narration:What if, instead of just happily running and quietly failing to do
what we want, we got an error message that said "The variable '$person' is
misspelled when you first try to use it."? Telling me what, specifically, is
wrong is the best thing that can happen whenever there is a problem.

%%%
*Debugging, and How to Do Less of It* format:markup slide:019

Let's make it happen...


    $prson='David';
    print "Hello, $person!";

%%%
*Debugging, and How to Do Less of It* format:markup slide:020

Boom.

    use strict;
    $prson='David';
    print "Hello, $person!";

%%%
*Debugging, and How to Do Less of It* format:markup slide:021



    use strict;
    $prson='David';
    print "Hello, $person!";

Output:
Global symbol "$prson" requires explicit package name (did you forget to
declare "my $prson"?) at a.pl line 2.
Global symbol "$person" requires explicit package name (did you forget to
declare "my $person"?) at a.pl line 3.
Execution of a.pl aborted due to compilation errors.

